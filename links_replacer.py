#!/bin/python
###############################################################################
# Author: Agustin Bassi
# Date: March 25, 2020
# Copyright: Agustin Bassi
# Email: jgustinbassi@gmail.com
###############################################################################

#########[ Imports ]########################################################### 

import fileinput
import logging
import os
import re
import sys

#########[ Settings & Data ]###################################################

# The prefix & suffix autogenerated by Google Doc export to HTML tool
LINK_PREFIX_PATTERN  = "https://www.google.com/url?q="
LINK_SUFFIX_PATTERN  = "&amp;sa=D&amp;ust="
# The content of prefix & suffix to be replaced
LINK_PREFIX_REPLACER = ""
LINK_SUFFIX_REPLACER = '" id="'
# The file names to update the content of links
FILE_NAMES_TO_UPDATE = [
    "content-spanish.html",
    "content-english.html"
]
# The original files will be renamed with this extension
FILE_SUFFIX_BACKUP = ".backup"

#########[ Module code ]#######################################################

def replace_file_links(file_content):
    file_content = file_content.replace(LINK_PREFIX_PATTERN, LINK_PREFIX_REPLACER)
    file_content = file_content.replace(LINK_SUFFIX_PATTERN, LINK_SUFFIX_REPLACER)
    file_content = file_content.strip("!'")
    logging.info("Links were replaced in file content")
    return file_content

def chech_if_file_exists(file_path, file_name):
    file_exists = False

    if os.path.isfile(os.path.join(file_path, file_name)):
        file_exists = True
        logging.debug("File {} exists in path {}".format(file_name, file_path))
    else:
        logging.debug("File {} not exists in path {}".format(file_name, file_path))

    return file_exists

def read_file_as_string(file_path):
    file_content = None
    try:
        with open(file_path,'rb') as _file:
            file_content = _file.read().strip().decode('ascii')
            
        logging.info("File content read at path {}".format(file_path))
    except:
        logging.error("While opening file at path {}".format(file_path))
    return file_content

def save_file_content(file_path, file_content):
    try:
        with open(file_path,'w') as _file:
            _file.write(file_content)

        logging.info("Save file content at path {}".format(file_path))
    except:
        logging.error("While writing file at path {}".format(file_path))
    return file_content

def print_dir_content(dir_to_print):
    # traverse root directory, and list directories as dirs and files as files
    print("\n\n")
    for root, dirs, files in os.walk(dir_to_print):
        path = root.split(os.sep)
        print((len(path) - 1) * '---', os.path.basename(root))
        for file in files:
            print(len(path) * '---', file)
    print("\n\n")

def replace_links_at_directory(input_directory):
    logging.info("Execute links replacer in recursive mode at path {}".format(input_directory))
    for dir_name, subdir_list, file_list in os.walk(input_directory):
        for file_name in FILE_NAMES_TO_UPDATE:
            if chech_if_file_exists(dir_name, file_name):
                # get the file path
                file_path = os.path.join(dir_name, file_name)
                # create a filepath to store file original content
                file_path_backup = file_path + FILE_SUFFIX_BACKUP
                # read the original content
                file_content_original = read_file_as_string(file_path)
                # modify the original file content with replaced links
                file_content_modified = replace_file_links(file_content_original)
                # save the original file data
                save_file_content(file_path_backup, file_content_original)
                # save modified file data
                save_file_content(file_path, file_content_modified)

def main():
    if len(sys.argv) == 2 and os.path.exists(sys.argv[1]):
        input_directory = sys.argv[1]
        print("\n\nInitializing links replacer at directory {}\n\n".format(input_directory))
        logging.basicConfig(
            level=logging.INFO, 
            format='%(asctime)s - %(levelname)s - %(funcName)s - %(message)s'
            )
        replace_links_at_directory(input_directory)
    else:
        help_str = """
        Error when running links replacer.
        To run it correctly is necessary to pass an existent path where html files are
        Example of use:
        
            python links_replacer.py absolute_path_where_posts_are
        """
        print(help_str)

if __name__ == "__main__":
    main()

#########[ Enf of file ]#######################################################
